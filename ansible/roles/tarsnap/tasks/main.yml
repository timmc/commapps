---
# Double-check. See redundant task in commdata for more info.
- name: "Confirm that commdata is mounted"
  shell: mountpoint /srv/commdata
  changed_when: False

# Mechanism for vars/vault separation for role vars
- include_vars: "{{ role_path }}/vars/vault.yml"

# ----

- name: "Install GPG -- needed for installing Tarsnap deb packaging key"
  apt: name=gpg

# Fetch and compute fingerprint of current authoritative key:
#
# curl -sS https://pkg.tarsnap.com/tarsnap-deb-packaging-key.asc \
#   | gpg --with-colons --import-options show-only --import --fingerprint \
#   | awk -F: '$1 == "fpr" {print $10;}'
#
# After running this, check the new expiry, e.g.:
#
# apt-key list | grep 6D1A -B 1
- name: Install Tarsnap deb packaging key
  apt_key:
    url: https://pkg.tarsnap.com/tarsnap-deb-packaging-key.asc
    state: present
    # Expires 2021-02-01
    # TODO Monitor for expiration?
    id: "6D1A57E4FA6982AAA2049EB6FC72A10BF6B692AA"

- name: Discover Debian codename
  shell: lsb_release --codename --short
  register: sh_debversion
  changed_when: False
  check_mode: no

- name: Use Tarsnap package repository
  copy:
    content: |
      # Ansible: remote-backup role
      deb http://pkg.tarsnap.com/deb/{{ sh_debversion.stdout }} ./
      deb-src http://pkg.tarsnap.com/deb-src ./
    dest: /etc/apt/sources.list.d/tarsnap.list
  register: tarsnap__repo

- name: Refresh after adding repo
  apt:
    update_cache: yes
  when: tarsnap__repo.changed

# Tarsnap packages are only pre-built for some architectures (not for
# ARM, for instance.) If it's in the package cache we can install it,
# but otherwise we'll have to use apt-src to build it from source.

- name: "Check if tarsnap is installable from binary"
  shell: apt-cache show tarsnap
  register: tarsnap__apt_cache
  failed_when: False
  changed_when: False
  check_mode: no

- name: Install tarsnap
  when: tarsnap__apt_cache.rc == 0
  apt: name=tarsnap

# TODO: Check if the installed version is the latest available, and
# upgrading if not. (Would apply to apt-src compiled packages, which
# don't get upgrades the normal way.)

- name: "Compile and install tarsnap"
  when: tarsnap__apt_cache.rc != 0
  include: source-install.yml

# ----

- name: Directory for tarsnap cache
  file:
    state: directory
    path: /srv/commdata/cache/tarsnap
    owner: root
    group: root
    mode: g=,o=

- name: "Cache tag for tarsnap cache (don't back up with borg or other tools)"
  copy:
    content: |
      Signature: 8a477f597d28d172789f06886806bc55
      # This file is a cache directory tag created by an Ansible playbook.
      # For information about cache directory tags, see <https://bford.info/cachedir/>
    dest: /srv/commdata/cache/tarsnap/CACHEDIR.TAG

# If tarsnap is called without the --cache option, it will try to
# write in a default location that happens to not be in the encrypted
# partition. Some sensitive information can be in the cache.
#
# If the partition isn't mounted, Tarsnap won't be able to get the
# key, so we can assume this symlink will always resolve.
- name: "Keep tarsnap from writing cache data outside of encrypted partition"
  file:
    state: link
    src: /srv/commdata/cache/tarsnap
    path: /usr/local/tarsnap-cache

- name: Directory for tarsnap secrets
  file:
    state: directory
    path: /srv/commdata/backups/secrets
    owner: root
    group: root
    mode: g=,o=

- name: Tarsnap key file
  copy:
    content: "{{ tarsnap__rw_keys[host_shortname] }}"
    dest: /srv/commdata/backups/secrets/tarsnap-rw.key
    owner: root
    group: root
    mode: g=,o=
  no_log: true

- name: A place for tarsnap scripts
  file:
    state: directory
    path: /opt/commapps/backups

- name: Install backup script
  copy:
    src: "{{ role_path }}/files/run-backup-lvm.sh"
    dest: /opt/commapps/backups/run-backup-lvm.sh
    mode: preserve

- name: Install archive listing script
  copy:
    src: "{{ role_path }}/files/list-archives.sh"
    dest: /opt/commapps/backups/list-archives.sh
    mode: preserve

- name: Install archive restore script
  copy:
    src: "{{ role_path }}/files/restore-archive.sh"
    dest: /opt/commapps/backups/restore-archive.sh
    mode: preserve

- name: "Install cron job"
  copy:
    content: |
      # crontab for commdata backups, installed by ansible

      SHELL=/bin/bash
      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

      # Timing randomly chosen to reduce stress on Tarsnap servers
      39 4 * * * root /opt/commapps/backups/run-backup-lvm.sh >> /var/log/commdata-tarsnap-backup.log 2>&1
    dest: /etc/cron.d/commdata-tarsnap-backup

- name: "Log rotation"
  copy:
    content: |
      /var/log/commdata-tarsnap-backup.log {
          monthly
          rotate 5
          missingok
      }
    dest: /etc/logrotate.d/commdata-tarsnap-backup
